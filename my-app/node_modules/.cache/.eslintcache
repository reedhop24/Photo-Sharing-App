[{"C:\\instagram-remake\\my-app\\src\\index.tsx":"1","C:\\instagram-remake\\my-app\\src\\App.tsx":"2","C:\\instagram-remake\\my-app\\src\\components\\Profile.tsx":"3","C:\\instagram-remake\\my-app\\src\\components\\Following.tsx":"4","C:\\instagram-remake\\my-app\\src\\components\\Followers.tsx":"5","C:\\instagram-remake\\my-app\\src\\components\\Auth.tsx":"6","C:\\instagram-remake\\my-app\\src\\components\\Upload.tsx":"7","C:\\instagram-remake\\my-app\\src\\components\\PostView.tsx":"8"},{"size":220,"mtime":1621019951485,"results":"9","hashOfConfig":"10"},{"size":2674,"mtime":1624289715626,"results":"11","hashOfConfig":"10"},{"size":4885,"mtime":1623942695856,"results":"12","hashOfConfig":"10"},{"size":3915,"mtime":1623864439731,"results":"13","hashOfConfig":"10"},{"size":2713,"mtime":1623864540466,"results":"14","hashOfConfig":"10"},{"size":5719,"mtime":1623870822218,"results":"15","hashOfConfig":"10"},{"size":2513,"mtime":1623943075107,"results":"16","hashOfConfig":"10"},{"size":566,"mtime":1624288238551,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"228skc",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\instagram-remake\\my-app\\src\\index.tsx",[],["38","39"],"C:\\instagram-remake\\my-app\\src\\App.tsx",[],"C:\\instagram-remake\\my-app\\src\\components\\Profile.tsx",["40"],"import React, {useEffect, useState} from 'react';\r\nimport {Container, Row, Col, Modal} from 'react-bootstrap';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport { gql } from '@apollo/client';\r\nimport Post from './PostView';\r\n\r\nconst Profile = ({client, user}):JSX.Element => {\r\n    let [formatted, setFormatted] = useState<Array<Array<Object>>>([]);\r\n    let [name, setName] = useState<String>('');\r\n    const userName:string | null = window.sessionStorage.getItem('userName');\r\n    const password:string | null = window.sessionStorage.getItem('password');\r\n    const token:string | null = window.sessionStorage.getItem('token');\r\n    const [posts, setPosts] = useState<Array<Object>>([]);\r\n    const [view, setView] = useState<Object>();\r\n\r\n    useEffect(() => {\r\n        if(user !== '') {\r\n            client.query({\r\n                query: gql`\r\n                query GetUsers {\r\n                    posts(userName:\"${userName}\", password:\"${password}\", token:\"${token}\", viewUserName:\"${user === null ? userName: user}\") {\r\n                        posts {\r\n                          image, \r\n                          caption,\r\n                          id\r\n                        },\r\n                        userName\r\n                    }\r\n                }\r\n            `})\r\n            .then((res) => { \r\n                if(res.data) {\r\n                    format(res.data.posts.posts);\r\n                    setName(res.data.posts.userName);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                alert(err.toString());\r\n            })\r\n        }\r\n    }, [user]);\r\n\r\n    const format = (posts) => {\r\n        let outer : Array<Array<Object>> = [];\r\n        let inner : Array<Object> = [];\r\n\r\n        setPosts(posts);\r\n        for(let i = 0; i < posts.length; i++) {\r\n            if(i % 3 === 0 && i > 0) {\r\n                outer.push(inner);\r\n                inner = [];\r\n            }\r\n            inner.push(posts[i]);\r\n        }\r\n\r\n        if(inner.length !== 0) {\r\n            outer.push(inner);\r\n        }\r\n\r\n        setFormatted(outer);\r\n    }\r\n\r\n    \r\n\r\n    const handleView = (image) => {\r\n        posts.forEach((x) => {\r\n            if(x['image'] === image) {\r\n                setView(x);\r\n            }\r\n        })\r\n    }\r\n\r\n    const deletePost = async () => {\r\n        try {\r\n            const deleted = await client.mutate({\r\n                mutation: gql`\r\n                mutation{\r\n                    deletePost(userName:\"${userName}\", password:\"${password}\", token: \"${token}\", postId: ${view!['id']}) {\r\n                      posts {\r\n                          image\r\n                          caption\r\n                          id\r\n                      }\r\n                    }\r\n                  }\r\n                `\r\n            });\r\n    \r\n            if(deleted.data) {\r\n                setView(undefined);\r\n                format(deleted.data.deletePost.posts);\r\n            }\r\n        } catch(err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"view-div\">\r\n                <Row className=\"centered-row\">\r\n                    <Col>\r\n                        <h1>{name}</h1>\r\n                    </Col>\r\n                </Row>\r\n                <div className=\"divider-1\"> <span></span> </div>\r\n                {formatted.map((x) => {\r\n                    return (\r\n                        <Row key={uuidv4()} className=\"centered-row\">\r\n                            {x.map((y) => {\r\n                                return <Col xs={4} key={uuidv4()} onClick={(ev) => handleView(y[\"image\"])}>\r\n                                    <div className=\"image-container\">\r\n                                        <img className=\"image\" alt=\"user\" src={y[\"image\"]} height=\"200\" width=\"400\"></img>\r\n                                        <div className=\"middle\">\r\n                                            <i className=\"fa fa-arrows\"></i>\r\n                                        </div>\r\n                                    </div>\r\n                                </Col>\r\n                            })}\r\n                        </Row>\r\n                    )\r\n                })}\r\n            </div>\r\n            <Modal show={view !== undefined} size=\"lg\">\r\n                <Modal.Body className=\"centered-row\">\r\n                    <Post post={view}/>\r\n                    <div style={{marginTop:\"60px\"}}>\r\n                        <i onClick={() => setView(undefined)} className=\"fa fa-close\" style={{fontSize:\"36px\"}}></i>\r\n                        <div style={{display: \"inline-block\", marginLeft:\"30px\"}}>\r\n                            <p className=\"user-name\" onClick={() => deletePost()}>delete post</p>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Profile;","C:\\instagram-remake\\my-app\\src\\components\\Following.tsx",["41"],"import React, {useEffect, useState} from 'react';\r\nimport {Container, Row, Col, Table, Button, Modal} from 'react-bootstrap';\r\nimport Profile from './Profile';\r\nimport { gql } from '@apollo/client';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst Following = ({client}):JSX.Element => {\r\n    const [newFollow, setNewFollow] = useState<string>('');\r\n    const [following, setFollowing] = useState<Array<Object>>([]);\r\n    const userName:string | null = window.sessionStorage.getItem('userName');\r\n    const password:string | null = window.sessionStorage.getItem('password');\r\n    const token:string | null = window.sessionStorage.getItem('token');\r\n    const [currView, setCurrView] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        client.query({\r\n            query: gql`\r\n            query GetUsers {\r\n                users(userName:\"${userName}\", password:\"${password}\") {\r\n                    following {\r\n                      name, \r\n                      userName\r\n                    }\r\n                  }\r\n            }\r\n            `\r\n        })\r\n        .then((res) => {\r\n            setFollowing(res.data.users.following);\r\n        })\r\n        .catch((err) => {\r\n            alert(err.toString());\r\n        })\r\n    }, [])\r\n\r\n    const addNewFollow = async () => {\r\n        try {\r\n            const follow = await client.mutate({\r\n                mutation: gql`\r\n                    mutation {\r\n                        addFollowing(userName:\"${userName}\", token: \"${token}\", password:\"${password}\" followingUserName:\"${newFollow}\") {\r\n                            userName,\r\n                            name\r\n                        }\r\n                    }\r\n                `\r\n            })\r\n\r\n            setFollowing([...following, follow.data.addFollowing]);\r\n        } catch (err) {\r\n            alert(err);\r\n        }\r\n    }\r\n\r\n    const handleCurrView = async (target) => {\r\n        setCurrView(target.innerHTML);\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <div className=\"view-div\">\r\n                <Row className=\"centered-row\">\r\n                    <Col>\r\n                        <h1>Following</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"centered-row\">\r\n                    <Col/>\r\n                    <Col xs={5}>\r\n                        <Table>\r\n                            <tbody>\r\n                                {following ? following.map((x) => {\r\n                                    return (\r\n                                            <tr key={uuidv4()}>\r\n                                                <td>{x['name']}</td>\r\n                                                <td className=\"user-name\" onClick={(ev) => handleCurrView(ev.target)}>{x['userName']}</td>\r\n                                            </tr>\r\n                                        )\r\n                                }) : null}  \r\n                            </tbody> \r\n                        </Table>\r\n                    </Col>\r\n                    <Col/>\r\n                </Row>\r\n                <Row className=\"centered-row\">\r\n                    <Col/>\r\n                        <Col xs={5}>\r\n                            <input className=\"input\" placeholder=\"Search for Users\" onChange={(ev) => setNewFollow(ev.target.value)}/> <Button className=\"custom-button\" style={{marginLeft: \"30px\"}} onClick={() => addNewFollow()}>Follow</Button>\r\n                        </Col>\r\n                    <Col/>\r\n                </Row>\r\n            </div>\r\n            <Modal show={currView !== ''} size=\"xl\">\r\n                <Modal.Body className=\"centered-row\">\r\n                    <Profile client={client} user={currView}/>\r\n                    <i onClick={() => setCurrView('')} className=\"fa fa-close\" style={{fontSize:\"36px\"}}></i>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Following;","C:\\instagram-remake\\my-app\\src\\components\\Followers.tsx",["42","43"],"import React, {useEffect, useState} from 'react';\r\nimport {Container, Row, Col, Table, Modal, Button} from 'react-bootstrap';\r\nimport Profile from './Profile';\r\nimport { gql } from '@apollo/client';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst Followers = ({client}):JSX.Element => {\r\n\r\n    const [followers, setFollowers] = useState<Array<Object>>([]);\r\n    const userName:string | null = window.sessionStorage.getItem('userName');\r\n    const password:string | null = window.sessionStorage.getItem('password');\r\n    const [currView, setCurrView] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        client.query({\r\n            query: gql`\r\n            query GetUsers {\r\n                users(userName:\"${userName}\", password:\"${password}\") {\r\n                    followers {\r\n                      name, \r\n                      userName\r\n                    }\r\n                  }\r\n            }\r\n            `\r\n        })\r\n        .then((res) => {\r\n            setFollowers(res.data.users.followers);\r\n        })\r\n        .catch((err) => {\r\n            alert(err.toString());\r\n        })\r\n    }, []);\r\n\r\n    const handleCurrView = async (target) => {\r\n        setCurrView(target.innerHTML);\r\n    }\r\n\r\n    return(\r\n        <Container>\r\n            <div className=\"view-div\">\r\n                <Row className=\"centered-row\">\r\n                    <Col>\r\n                        <h1>Followers</h1>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"centered-row\">\r\n                    <Col/>\r\n                    <Col xs={5}>\r\n                        <Table>\r\n                            <tbody>\r\n                                {followers.map((x) => {\r\n                                    return (\r\n                                            <tr key={uuidv4()}>\r\n                                                <td>{x['name']}</td>\r\n                                                <td className=\"user-name\" onClick={(ev) => handleCurrView(ev.target)}>{x['userName']}</td>\r\n                                            </tr>\r\n                                        )\r\n                                })} \r\n                            </tbody>  \r\n                        </Table>\r\n                    </Col>\r\n                    <Col/>\r\n                </Row>\r\n            </div>\r\n            <Modal show={currView !== ''} size=\"xl\">\r\n                <Modal.Body className=\"centered-row\">\r\n                    <Profile client={client} user={currView}/>\r\n                    <i onClick={() => setCurrView('')} className=\"fa fa-close\" style={{fontSize:\"36px\"}}></i>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Followers;","C:\\instagram-remake\\my-app\\src\\components\\Auth.tsx",[],"C:\\instagram-remake\\my-app\\src\\components\\Upload.tsx",[],"C:\\instagram-remake\\my-app\\src\\components\\PostView.tsx",["44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":41,"column":8,"nodeType":"51","endLine":41,"endColumn":14,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":34,"column":8,"nodeType":"51","endLine":34,"endColumn":10,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":2,"column":44,"nodeType":"57","messageId":"58","endLine":2,"endColumn":50},{"ruleId":"49","severity":1,"message":"53","line":33,"column":8,"nodeType":"51","endLine":33,"endColumn":10,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":29,"nodeType":"62","endLine":8,"endColumn":76},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'client', 'password', 'token', and 'userName'. Either include them or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has missing dependencies: 'client', 'password', and 'userName'. Either include them or remove the dependency array.",["66"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar",["67"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"68","fix":"69"},{"desc":"70","fix":"71"},{"desc":"70","fix":"72"},"Update the dependencies array to be: [client, password, token, user, userName]",{"range":"73","text":"74"},"Update the dependencies array to be: [client, password, userName]",{"range":"75","text":"76"},{"range":"77","text":"76"},[1586,1592],"[client, password, token, user, userName]",[1235,1237],"[client, password, userName]",[1103,1105]]